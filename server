# 소켓 생성을 위한 모듈 import
# import socket
#
# # 통신을 위한 소켓 생성
# sock = socket.socket()
#
# # 클라이언트가 연결할 주소(그리고 포트) 바인딩
# # port: 항구라는 의미 종단간 통신의 출입구(0~65535개)
# sock.bind(
#     ('127.0.0.1',3000)
# )
#
# # 클라이언트 연결 대기 모드
# # 파라미터값은 연결 큐의 최대 크기를 의미
# sock.listen(5)
#
# # 이 라인에서 대기하면서 클라이언트 측의 연결 요청을 기다림.
# # 연결이 되면 클라이언트 소켓과 주소를 반환
# client_sock, address = sock.()
#
# print(address,'에서 연결 요청')
#
# while True:
#     # 최대 225 길이의 데이터를 수신
#     data = client_sock.recv(255)
#     msg = data.decode(encoding='utf8')
#     print("client:",msg)
#
#     msg = input('server:')
#     client_sock.send(bytes(msg,encoding='utf8'))

import threading
# 스래드를 사용하기 위한 모듈 ( 스래드 = 실타래 ( 프로그램을 갈라지게 하는것))
import socket
import time

class SockServer:
    def __init__(self,address:str,port:int):
        # 바인딩할 주소와 포트번호
        self.addr = address
        self.port = port

        # 소켓 생성
        self.sock = socket.socket()

        # 클라이언트 소켓 리스트
        self.client = []

    def accept(self):
        self.sock.bind(
            (self.addr,self.port)
        )
        self.sock.listen(5)
        while True:
            client_sock, address = self.sock.accept()
            client_sock.settimeout(0.01)
            self.client.append(client_sock)
            print(address, "에서 연결")

    # 클라이언트 소켓에 데이터 전송
    def send(self):


        while True:
                msg = input()
                for o in self.client:
                    try:                # 예외 발생시 except로 넘어가서 실행함
                        o.send(bytes(msg,encoding='utf8'))
                    except socket.timeout:
                        continue

    # 클라이언트 소켓으로 부터 데이터 수신
    def recv(self):
        while True:
            for o in self.client:
                try:
                    data = o.recv(255)
                    msg = data.decode(encoding='utf8')
                    print(msg)
                except socket.timeout:
                    continue

    # 통신 시작 함수
    def communicate(self):
        # 각각의 스래드 생성
        t_accept = threading.Thread(target=self.accept, daemon=True)
        t_send = threading.Thread(target=self.send, daemon=True)
        t_recv = threading.Thread(target=self.recv,daemon=True)

        # 스래드 시작
        t_accept.start()
        t_send.start()
        t_recv.start()

        # 프로그램 종료 방지
        while True:
            time.sleep(1000)

server = SockServer('127.0.0.1', 3000)
server.communicate()
