# 연산자 우선순위를 판별하기 위한 클래스
class Operator:
    # 생성자
    def __init__(self,op:str):
        self.op = op            # op = operator (연산자)
        if op not in ('+','-','*','/'):
            raise ValueError("사용가능한 연산자가 아닙니다.")

    # 매직 메소드 (Magic mathods): +,-,>,<,= 등의 기본 연산자 및 내장함수의 기능에 대하여
    # 오버라이딩을 가능하게 해주는 메소드

    # other와 값을 (equal, ==)
    def __eq__(self, other):
        if type(other) != Operator:
            raise TypeError(f'{type(other)}타입과의 비교는 지원되지 않습니다.')
        if self.op in ('+','-') and other.op in ('+','-'):
            return True
        if self.op in ('*','/') and other.op in ('*','/'):
            return True
        else:
            return False
    # other 보다 작음  (less than, <)
    def __lt__(self, other):
        if type(other) != Operator:
            raise TypeError(f'{type(other)}타입과의 비교는 지원되지 않습니다.')

        return self.op in ('+','-') and other.op in ('*','/')


    # other  보다 작거나 같음 (less than ~ or equal, <=)
    def __le__(self, other):
        if type(other) != Operator:
            raise TypeError(f'{type(other)}타입과의 비교는 지원되지 않습니다.')

        return self.__eq__(other) or self.__lt__(other)

    # other 보다 큼  (greater than, >)
    def __gt__(self, other):
        if type(other) != Operator:
            raise TypeError(f'{type(other)}타입과의 비교는 지원되지 않습니다.')

        return not self.__le__(other)

    # other 보다 크거나 같음  (greater than ~ or equal, >=)
    def __ge__(self, other):
        if type(other) != Operator:
            raise TypeError(f'{type(other)}타입과의 비교는 지원되지 않습니다.')

        return not self.__lt__(other)

    # 클래스의 정보를 표현함. (represent)
    def __repr__(self):
        return f'Operator({self.op})'

    def operation(self,x,y):
        if self.op == '+':
            return x+y
        if self.op == '-':
            return x-y
        if self.op == '*':
            return x*y
        if self.op == '/':
            return x/y

# op_plus = Operator('+')
# op_minus = Operator('-')
# op_mul = Operator('*')
# op_div = Operator('/')
#
# print('(+ == -):',op_plus == op_minus)
# print('(+ >= -):',op_plus >= op_minus)
# print('(+ > -):',op_plus > op_minus)
#
# print('(+ == *):',op_plus == op_mul)
# print('(+ >= *):',op_plus >= op_mul)
# print('(+ < *):',op_plus < op_mul)
# print('(+ <= *):',op_plus <=  op_mul)

# 정수 타입 계산기 클래스
class IntCalc:
    # 생성자
    def __init__(self):
        self.infix_expr = []
    # 문자열 수식을 리스트로 변환하여 infix_expr 에 저장하는 함수
    def set_expression(self,expr:str):
        self.infix_expr.clear() # 기존 리스트 초기화
        operand = '' # 피연산자
        for x in expr:
            if x.isdigit(): # 현재 수식이 숫자인 경우
                operand += x
            else:           # 현재 수식이 연산자인 경우
                if len(operand) > 0:
                    self.infix_expr.append(int(operand))
                    operand = ''
                self.infix_expr.append(Operator(x))

        if len(operand) > 0:
            self.infix_expr.append(int(operand))
        print('수식을 리스트로:', self.infix_expr)

    # infix_expr(중위표현식)을 후위표현식으로 반환하는 함수
    # 1. 숫자는 그대로 출력(prefix_exer에 붙인다는 뜻)한다.
    # 2. 연산자는 스택에 넣는다.
    # 2-1. 스택이 비어있는 경우는 무적권 넣는다.
    # 2-2. 스택이 비어있지 않은 경우는 넣으려는 연산자와 스택에 있는 연산자를 비교하여
    #           스택에 맞는 연산자의 우선순위가 넣으려는 연산자의 우선순위보다 작을 때 까지
    #           스택에서 Pop하면서 출력하고 넣으려는 연산자를 스택에 넣어준다.
    # 3. 마지막으로 남아있는 스택에 모든 연산자를 출력한다.
    def infix_to_prefix(self):
        stack = []
        prefix_expr = []
        #TODO: 기능 작성
        for x in self.infix_expr:
            # 숫자 정수는 그대로 prefix에 출력한다.
            if type(x) == int:
                prefix_expr.append(x)
            # 숫자가 아닌 연산자라면 위에 서술한 규칙을 따른다.
            else:
                while len(stack) > 0 and stack[-1] > x:
                    prefix_expr.append(stack.pop())
                stack.append(x)
        # 마지막으로 남아있는 스택의 내용을 모두 출력
        while len(stack) > 0:
            prefix_expr.append(stack.pop())
        print('후위연산자 변환:', prefix_expr)
        return prefix_expr

    # 수식을 평가(계산)하는 함수
    def evaluation(self):
        prefix_expr = self.infix_to_prefix()
        stack = []
        for x in prefix_expr:
            if type(x) == int:
                stack.append(x)
            else:
                b = stack.pop()
                c = stack.pop()
                stack.append(x.operation(c,b)) 
        if len(stack) > 1:
            raise ValueError('잘못된 수식을 계산하려고 했습니다.')

        return  stack.pop()

calc = IntCalc()
calc.set_expression('12*20-3+4')
calc.infix_to_prefix()
print(calc.evaluation())
