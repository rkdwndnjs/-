# -from tkinter import *
from tkinter.ttk import *
from client import *
import threading


class Chat:
    def __init__(self):
        # 클라이언트 소켓 생성
        self.client = SockClient('127.0.0.1',3000)
        # receive 스래드
        self.t_recv = None


        #TODO  ------- UI 생성 -------
        # 메인 윈도우 생성
        self.root = Tk()
        self.root.title("채팅 클라이언트")
        self.root.geometry("400x600")
        self.root.resizable(False,False) # 크기조정 못하게 하기


        # 주소 입련란 생성

        # 1. UI 배치를 위한 프래임 생성
        self.frame1 = Frame(self.root)
        self.frame1.pack(side="top",padx=5,pady=5, fill="x")

        # 2 서버 주소 입력창 생성
        self.address_box = Entry(self.frame1)
        self.address_box.pack(side="left", expand=True, fill="both")

        #3 서버 연결 버튼 생성
        self.connect_btn = Button(self.frame1, text="연결")
        self.connect_btn.pack(side="right",padx = 5, fill="both")

        # 채팅창 생성
        # 1. UI 배치를 위한 프레임 생성
        self.frame2 = Frame(self.root)
        self.frame2.pack(side="top",padx=5,pady=5, expand=True,fill="both")

        # 2. 스크롤바 생성
        self.scroll = Scrollbar(self.frame2)
        self.scroll.pack(side="right", fill="y")

        # 3. 텍스트 리스트 생성 + 스크롤바 적용
        self.chat_box= Listbox(self.frame2, yscrollcommand=self.scroll.set)
        self.chat_box.pack(side="left",expand=True, fill="both")
        self.scroll.configure(command=self.chat_box.yview) # 스크롤바가 y의 값을 알려줌

        # 채팅 입력창 생성
        # 1. UI 배치를 위한 프레임 생성
        self.frame3 = Frame(self.root)
        self.frame3.pack(side="bottom", padx=5,pady=5,fill='x')

        # 2. 이름 입력창 생성
        self.name_box = Entry(self.frame3, state="disabled", width=10)
        self.name_box.pack(side="left",fill="both")

        # 3. 내용 입력창 생성
        self.input_box = Entry(self.frame3, state="disabled")
        self.input_box.pack(side="left", expand=True, fill="both", padx=5)

        # 4. 전송버튼 생성
        self.send_bnt = Button(self.frame3,text="전송", state="disabled")
        self.send_bnt.pack(side="right",fill="both")

        # ---------UI 생성 끝---------



        self.connect_btn.configure(command=self.cmd_connect)
        self.send_bnt.configure(command=self.cmd_send)
        self.input_box.bind("<Return>", lambda x: self.cmd_send())
        # 127.0.0.1:3000


        self.root.mainloop()


    # 메세지 수신시 호출되는 콜백 함수
    def callback_recv(self,msg):
        if type(msg) == str:
            # 현재 스크롤 위치 가져오기
            scrollPos = self.chat_box.yview()[1]
            # 메세지를 리스트에 추가
            self.chat_box.insert(END,msg)
            # 스크롤이 맨 밑에 있었다면, 계속 맨 밑을 유지하게 만듬
            if scrollPos == 1.0:
                self.chat_box.yview_moveto(1.0)


    # 연결 커멘드 (연결 버튼에 할당할 것)
    def cmd_connect(self):
        try:
            # 입력된 주소를 가져옴
            addr_str = self.address_box.get()
            # ip 주소와 port를 따로 분리시킴
            ip,port=addr_str.split(":")
            # SockClient의 연결정보 수정
            self.client.addr = ip
            self.client.port = int(port)
            # 연결 시작
            self.client.connect()
            # 메세지 receive 시작
            self.t_recv = threading.Thread(target=self.client.recv, args=(self.callback_recv,))
            self.t_recv.start()


        except Exception:
            # 연결이 실패하면 그냥 무시
            pass
        else:
            # 예외없이 연결에 성공한 경우
            self.address_box.configure(state="disabled")
            self.connect_btn.configure(state="disabled")
            self.name_box.configure(state="enabled")
            self.input_box.configure(state="enabled")
            self.send_bnt.configure(state="enabled")

    # 전송 커멘드 (서버로 메시지 전송, 전송버튼에 할당할 것)
    def cmd_send(self):
        try:
            # 이름과 메세지를 입력창으로 부터 읽는다.
            name = self.name_box.get()
            msg = self.input_box.get()
            if len(name) == 0:
                name = "ㅇㅇ"

            if len(msg) == 0:
                return
            self.send_bnt

            # 입력된 이름과 내용으로 메세지 전송
            self.client.send(name + ":"+msg)
        except Exception:
            pass
        else:
            self.input_box.delete(0,END)




Chat()
