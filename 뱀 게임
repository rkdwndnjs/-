import random
import pygame
from datetime import datetime
from datetime import timedelta

SCREEN_WIDTH = 400
SCREEN_HEIGHT = 400
BLOCK_SIZE = 20

# 뱀게임 에 사용할 색상을 정의
RED = (51, 0,51)  # 사과에 사용할 색
GREEN = (153, 255, 255)  # 뱀에 사용할 색
WHITE = (0, 0, 0)  # 배경에 사용할 색
GRAY = (127, 127, 127)

# pygame 모듈 초기화
pygame.init()

# screen 생성
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))


# 배경을 그리는 함수 정의,
def draw_background(screen):
    # 좌표상의 직사각형 공각을 정의 후 draw.rect를 통해 그린다.
    background = pygame.Rect((0, 0), (SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.draw.rect(screen, WHITE, background)


# 블록(픽셀)을 그리는 함수 정의
def draw_block(screen, color, position):
    block = pygame.Rect((position[0] * BLOCK_SIZE, position[1] * BLOCK_SIZE), (BLOCK_SIZE, BLOCK_SIZE))
    pygame.draw.rect(screen, color, block)


# 뱀이 움직이는 방향에 대한 오프셋
class Offset:
    NONE = [0, 0]
    RIGHT = [1, 0]
    LEFT = [-1, 0]
    UP = [0, -1]
    DOWN = [0, 1]


class Snake:
    # 생성시 뱀의 색상과 위치, 초기에 움직일 방향을 입력
    def __init__(self, color, position, offset):
        self.color = color
        self.offset = offset
        # 머리 ~ 꼬리의 위치들
        self.positions = [
            position,
            [position[0], position[1] + 1],
            [position[0], position[1] + 2],
            [position[0], position[1] + 3],
        ]

    # 뱀을 그리는 함수
    def draw(self):
        for position in self.positions:
            draw_block(screen, self.color, position)

    # 뱀을 움직이는 함수 - 꼬리가 머리를 따라가게 함
    def move(self):
        # 현재 위치를 기억
        now_pos = [self.positions[0][0], self.positions[0][1]]
        # 머리를 오프셋만큼 이동
        self.positions[0][0] += self.offset[0]
        self.positions[0][1] += self.offset[1]
        # 마지막 위치를 기억
        last_pos = now_pos
        for i in range(1, len(self.positions)):
            now_pos = [self.positions[i][0], self.positions[i][1]]
            self.positions[i] = last_pos
            last_pos = now_pos

    # 뱀의 꼬리 길이를 늘리는 함수
    def grow(self):
        self.positions.append([self.positions[-1][0], self.positions[-1][1]])


class Apple:
    # 생성시 사과의 위치와 색상을 입력한다.
    def __init__(self, color, position):
        self.color = color
        self.position = position

    # 사과를 그리는 함수
    def draw(self):
        draw_block(screen, self.color, self.position)

    # 사과를 랜덤한 위치로 이동 시키는 함수
    def random_move(self,avoid_pos):
        self.position = [random.randint(0,19),random.randint(0,19)]
        while self.position in avoid_pos:
            self.position = [random.randint(0,19), random.randint(0,19)]


# 게임을 정의하는 클래스
class Game:
    # 생성시 뱀과 사과의 인스턴스를 생성한다.
    def __init__(self):
        self.snake = Snake(GREEN, [9, 9], Offset.UP)
        self.apple = Apple(RED, [3, 3])

    # 배경과 생성된 인스턴스들을 그리는 함수 ( 배경보다 뱀이 먼저 생성되면 뱀은 배경에 가려진다)
    def draw(self):
        draw_background(screen)
        self.apple.draw()
        self.snake.draw()
        pygame.display.update()  # 그려진 내용이 반영되도록 업데이트를 한다



    def start(self):
        last_movement = datetime.now()  # 시간이 흐름을 표현하기 위해 만든 변수
        keydown_flag = False  # 키가 눌린 상태 인지 확인 하는 플래그

        while True:
            events = pygame.event.get()  # 게임의 이벤트 현상을 받는다
            for event in events:
                if event.type == pygame.QUIT:
                    exit()
                elif event.type == pygame.KEYDOWN and not keydown_flag:
                    if event.key == pygame.K_RIGHT and self.snake.offset != Offset.LEFT:
                        self.snake.offset = Offset.RIGHT
                        keydown_flag = True
                    elif event.key == pygame.K_LEFT and self.snake.offset != Offset.RIGHT:
                        self.snake.offset = Offset.LEFT
                        keydown_flag = True
                    elif event.key == pygame.K_UP and self.snake.offset != Offset.DOWN:
                        self.snake.offset = Offset.UP
                        keydown_flag = True
                    elif event.key == pygame.K_DOWN and self.snake.offset != Offset.UP:
                        self.snake.offset = Offset.DOWN
                        keydown_flag = True

            if self.snake.positions[0] == self.apple.position:
                # 사과를 없애고 새로운 위치에 생성
                # 뱀의 길이를 한칸 늘려줌
                self.apple.random_move(self.snake.positions)
                self.snake.grow()


            shead = self.snake.positions[0]
            if shead[0] < 0 or shead[0] > 19 or shead[1] < 0 or shead[1] > 19:
                exit()

            if shead in self.snake.positions[1:]:
                exit()

            if timedelta(milliseconds=300) <= datetime.now() - last_movement:
                self.snake.move()
                last_movement = datetime.now()
                keydown_flag = False


            self.draw()  # 게임의 모든 인스턴스를 그린다


game = Game()
game.start()


인공지능 만들기

# 데이터 분석을 위한 기초 라이브러리로 고성능 수치계산을 위해 제작되었음
# Neural Python 의 약칭 백터 및 행렬 연산에 있어서 매우 편리한 기능을 제공
import numpy as np

# 과학 분석 알고리즘을 위한 모듈, 수치적분,이분방정식 해석기, 확률 분포와 같은
# 다양한 통계관련 도구를 제공, 여기서는 sigmoid 함수를 위한 special만 사용
import scipy.special

# 신경망 클래스 정의
class NeuralNetwork:
    #신경망 초기화
    # 입력노드, 히든노드, 출력노드의 개수와 학습률을 초기화하고 가중치 행렬을 생성
    def __init__(self,inputnodes,hiddenodes,outputnodes):
        self.inodes = inputnodes
        self.hnodes = hiddenodes
        self.onodes = outputnodes

        # 가중치 행렬 wih(weight of input -> hidden)
        # 가중치 행렬 who(weight of hidden -> output)
        # 중앙값이 0.89이고 표준편차를 노드 개수에 루트를 씌우고 역수를 취한값을 지정한 분포도 생성
        # 분포도에서 랜덤한 값을 가져와 (노드 개수X 노드개수)의 행렬을 생성한다.
        self.wih = np.random.normal(0.0, pow(self.hnodes,-0.5), (self.hnodes,self.inodes))
        self.who = np.random.normal(0.0, pow(self.onodes, -0.5), (self.onodes, self.hnodes))

        # 활성화 함수로 시그모이드 함수를 사용
        self.activation_function  = lambda x: scipy.special.sepit(x)

    # 신경망 학습 함수
    def train(self,inputs_list,targets_list,learning_rate):
    # 입력 리스트를 2차원 전치 행렬로 전환
        inputs = np.array(inputs_list,ndmin = 2)
        targets = np.array(targets_list, ndmin=2)

        # 히든 계층으로 들어오는 신호를 계산
        hidden_layer_in = np.dot(self.wih,inputs)
        # 히든 계층에서 나가는 신호를 계산
        hidden_layer_out = self.activation_function(hidden_layer_in)

        # 출력 계층으로 들어오는 신호를 계산
        output_layer_in = np.dot(self.who,hidden_layer_in)
        # 출력 계층에서 나가는 신로를 계산(인풋 -> 히든 -> 아웃풋의 최종결과)
        output_layer_out = self.activation_function(output_layer_in)
        # 실제값과의 오차를 계산 (오차 = 실제값 = 계산값)
        output_error = targets - output_layer_in
        hidden_error = np.dot(self.who.T,output_error)

        #은닉 계층과 출력 계층간의 가중치 업데이트(역전파 발생)
        self.who += learning_rate * np.dot(output_error * output_layer_in* (1.0 - output_layer_out), np.transpose(hidden_layer_out))
        self.wih += learning_rate * np.dot(hidden_error * output_layer_out* (1.0 - hidden_layer_out), np.transpose(inputs))

    # 신경망에 물어보기
    def query(self,inputs_list):
        # 입력 리스트를 2차원 전치 행렬로 변환
        inputs = np.array(inputs_list,ndmin = 2).

        # 은닉계층으로 들어오는 신호를 계산
        hidden_layer_in = np.dot(self.wih,inputs)
        # 은닉계층에서 나가는 신호를 계산
        hidden_layer_out = self.activation_function(hidden_layer_in)

        # 출력계층으로 들어오는 신호를 계산
        output_layer_in = np.dot(self.who,hidden_layer_out)
        #출력계층에서 나가는 신호를 계산(결과값)
        output_layer_out = self.activation_function(output_layer_in)

        return output_layer_out
